FORMAT: 1A
HOST: https://test.ambrosus.io

# Ambrosus Node API

Welcome to Ambrosus Node API Documentation.

### Authentication
Before you can start interacting with API you need to create an account. An account is a pair: address and secret.

Depending on the type of operation you want to perform you are required to provide one of two forms of authentication: signed content or token based.

For entity upload operations the body of the request needs to contain a `content.signature` field. It is generated by signing the [serialized](Serialization) `content.idData` object using the standard ethereum sign function and your private key.

For other operations (modifying accounts and querying entities) a token should be provided using the http authorization header with `AMB_TOKEN ...` . The calculation of a token is described in the [Token section](Token).

There is a special third option where you provide a http authorization header `AMB ...` with your account private key. When doing so the gateway will calculate the signature for you. This mechanism can be enabled using a config parameter. __Warning__: Sharing your private key is a security risk. This mechanism should therefore only be used in development and testing environments.

### Immutability

__Note:__ All data is immutable, therefore, you will not find update or delete calls.

## Serialization [Serialization]

When serialising data for hashing and signing, special care needs to be taken so that the result is deterministic. Otherwise the output values may not match, and lead to validation errors. Following rules need to be followed:

* The JSON is serialized to a single-line string without any whitespace characters outside of strings
* All fields in objects are sorted lexicographically
* In other aspects the output should match `JSON.stringify`

## Hashing

Hashes are a very important part of proving the persistence and the immutability of the data. All hashes in the AMB-NODE are computed using the ethereum standard `hashMessage` function as described in [web3 docs](https://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html#hashmessage). The underlying hash function is [Keccak256](https://keccak.team/index.html).

### Errors

The majority of errors along to the error code provide additional information in `body` with following format:
```{json}
{
  "reason": "What happened"
}
```

## Group Token [Token]

Some requests like account management or accessing to restricted data fields require an access token for authorization. The access token is a base64-encoded [serialized](Serialization) JSON file of following format:
```$json
{
  "signature": $SIGNATURE,
  "idData": {
    "createdBy": $ADDRESS,
    "validUntil": $TIMESTAMP
  }
}
```
where $ADDRESS is your public address and $TIMESTAMP is a UNIX-styled integer specifying token's expiration date.
$SIGNATURE is an elliptic-curve signature of the idData field. Should be signed with the creator's private address. We recommend to create the token locally and use it across Ambrosus API without sending your private key anywhere.
### /token
__ⓘ Note:__  Available only for Atals node.
#### Create token [POST]

__Warning__ This call can be used for development purposes only. Never provide your secret address to anyone.


+ Request
    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + validUntil (number) - Unix timestamp in the future specifying the token expiration time.

    + Body

            {
                "validUntil": 1546300800
            }
+ Response 201 (application/json)

    Created

    + Attributes (object)
        + token (string) - Base64 encoded signed token data.

    + Body

            {
                "token": "eyJpZERhdGEiOnsiY3JlYXRlZEJ5IjoiMHg3NDJFNjJDQzdBMTlFZjdEOWM0NDMwNkMwN0ZBZDU0QjViRjZkNGJFIiwidmFsaWRVbnRpbCI6NDJ9LCJzaWduYXR1cmUiOiIweDY4MWVjZjRiNzM3YzViNGY5ZjlhYTZlMDUzOWIzMzAyNzY0NDQzYWRlNWNmMWJhMTIxMGFmNzA1MTdkYTczOWY1MzBlNTEwYmI0NTc1N2YyNWZiZTE3NzczMWVhNzAxYjVmOTU5NGZlYmQ0ZDA2YjEwOGYyM2NhYjAyMmU5MzNmMWIifQ"
            }

## Group Account
__ⓘ Note:__ Used for compatibility with an old Dashboard.
__ⓘ Note:__  Available only for Hermes node.


An account represents an actor in the supply chain. This can be a person, a company, a location, etc.

It consists of a pair - a public identifer `address` (compatible with ethereum address) and a `secret` (compatible with ethereum private key). Additionally an account has a list of permissions, which specify what actions user can perform and an access levels, which specifies what data is user able to view.

Account can hold any number of following permissions:

* super_account - Almighty administrator account. Is able to perform all kinds of calls.
* protected_account - account protected from modification. Protected accounts can be created only by super accounts or other protected accounts. Only super accounts can modify the protected accounts.
* create_asset - allows account to create assets
* create_event - allows account to create events
* register_accounts - allows account to add new accounts
* manage_accounts - allows account to view and manage existing accounts

## Group Account2
__ⓘ Note:__  Available only for Hermes node.

An account represents an actor in the supply chain. This can be a person, a company, a location, etc.

It consists of a pair - a public identifer `address` (compatible with ethereum address) and a `secret` (compatible with ethereum private key). Additionally an account has a list of permissions, which specify what actions user can perform and an access levels, which specifies what data is user able to view.

Account can hold any number of following permissions:

* super_account - Almighty administrator account. Is able to perform all kinds of calls.
* protected_account - account protected from modification. Protected accounts can be created only by super accounts or other protected accounts. Only super accounts can modify the protected accounts.
* create_asset - allows account to create assets
* create_event - allows account to create events
* register_accounts - allows account to add new accounts
* manage_accounts - allows account to view and manage existing accounts

### /account2/list{?perPage,page}

#### List accounts [GET]

__Warning__ Request sender needs to have "manage_accounts" permission

Finds accounts satisfying provided criteria.

+ Parameters

    + perPage (integer, optional) - Number of accounts to return per page (limited to 100)
    + page (integer, optional) - Number of page (more search results than specified in perPage parameter concludes more than one page)

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

+ Response 200 (application/json)

    + Attributes (object)
        + results (array) - The latest 100 accounts matching provided criteria
            + (object) - Account.
              + registeredBy (string) - The address which has registered the account.
              + registeredOn (number) - UNIX timestamp of account registration.
              + permissions (array) - A list of permissions granted to this account
              + accessLevel (number) - Access level of the account. Should be a non-negative integer.
              + organization (number) - Identifier of the organization the account belongs to.
              + address (string) - An address of the account.
              + email (string) - An email of the account.
              + active (boolean) - State of the account.

    + Body

                "data":
                  [
                    {
                      "address":"0x918eACF10eA2C47B001f761460Ed19607656f01C",
                      "email":"email1C@domain.com",
                      "fullName":null,
                      "accessLevel":100,
                      "organization":9,
                      "permissions":["create_asset", "create_event"],
                      "registeredBy":"0xC769C64a70ECA2606A927DC28DD947A5Dbec237B",
                      "registeredOn":1584685139,
                      "active":true
                    }
                  ]

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_accounts permission

    + Body

+ Response 404 (application/json)

    Requested account does not exist

    + Body

### /account2/info/{accountAddress}

#### Info account [GET]

__Warning__ Request sender needs to have "manage_accounts" permission

+ Parameters
    + accountAddress (string) - An address of the account


+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

+ Response 200 (application/json)

    + Attributes (object)
              + registeredBy (string) - The address which has registered the account.
              + registeredOn (number) - UNIX timestamp of account registration.
              + permissions (array) - A list of permissions granted to this account
              + accessLevel (number) - Access level of the account. Should be a non-negative integer.
              + organization (number) - Identifier of the organization the account belongs to.
              + address (string) - An address of the account.
              + email (string) - An email of the account.
              + active (bollean) - State of the account.
    + Body

            "data":
                  [
                    {
                      "address":"0x918eACF10eA2C47B001f761460Ed19607656f01C",
                      "email":"email1C@domain.com",
                      "fullName":null,
                      "accessLevel":100,
                      "organization":9,
                      "permissions":["create_asset", "create_event"],
                      "registeredBy":"0xC769C64a70ECA2606A927DC28DD947A5Dbec237B",
                      "registeredOn":1584685139,
                      "active":true
                    }
                  ]

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_accounts permission

    + Body

### /account2/create/{accountAddress}

#### Create account [POST]

__Warning__ Request sender needs to have "register_accounts" permission

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

    + Parameters
        + address (string) - An address of the new account

    + Attributes (object)
        + permissions (array) - A list of permissions granted to this account. It is not possible to give permissions the request sender lacks.
        + accessLevel (number) - Access level of the account. Should be a non-negative integer. Cannot be higher than sender's accessLevel.
        + email (string) - Email for the account.

    + Body

            {
                "permissions" : ["register_accounts", "create_asset", "create_event"],
                "accessLevel" : 100,
                "email" : "email1C@domain.com"
            }

+ Response 201 (application/json)

    Created.

    + Body

            {"data":
              {
                "address":"0x918eACF10eA2C47B001f761460Ed19607656f01C",
                "email":"email1C@domain.com",
                "fullName":null,
                "accessLevel":100,
                "organization":9,
                "permissions":["create_asset", "create_event", "create_event"],
                "registeredBy":"0xC769C64a70ECA2606A927DC28DD947A5Dbec237B",
                "registeredOn":1584685139,
                "active":true
              }
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_accounts permission

    + Body

### /account2/modify/{accountAddress}

#### Modify account [POST]

__Warning__ Request sender needs to have "manage_accounts" permission
It is not possible to modify protected accounts and accounts belonging to different organizations.

+ Parameters
    + accountAddress (string) - An address of the account

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB_TOKEN ...

    + Attributes (object)
        + permissions (array, optional) - A list of permissions granted to this account. It is not possible to give permissions the request sender lacks.
        + accessLevel (number, optional) - Access level of the account. Should be a non-negative integer. Cannot be higher than senders's accessLevel.
        + email (string, optional) - Email of the account.

    + Body

            {
                "permissions" : ["register_accounts", "create_asset"],
                "accessLevel" : 0
            }

+ Response 200 (application/json)

    + Body

            {
                "address": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                "registeredBy": "0x345b44701723a31f457a534801cd181cd38eb5bcd",
                "registeredOn": 32141243,
                "permissions": ["register_accounts", "create_asset"],
                "accessLevel": 4
            }

+ Response 400 (application/json)

    Validation error

    + Body

+ Response 401 (application/json)

    Authentication error

    + Body

+ Response 403 (application/json)

    Invalid signature or missing register_accounts permission

    + Body

## Group Assets

Assets are primary elements moving through a supply chain. The are the nouns of the system. They can represent an ingredient, product, package of products or any other type of container.

An Asset on its own function only as a handle for a Event stream. Because of this, they only contain an `idData` structure holding minimal information about their creation.

Assets are identified by an `assetId` field which is a sha3 hash calculated from the `content` field. \



### /assets/{assetId}
__ⓘ Note:__  Available for both Hermes and Atlas nodes.
#### Fetch an asset by Id [GET]

Fetches asset with provided assetId in the system.

+ Parameters

    + assetId (string, required) - ID of an asset

+ Response 200 (application/json)

    Asset with provided assetId

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the asset.
        + content (object) - All meaningful content of the asset, base of assetId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - General information about an asset.
                + createdBy (string) - Public address of the asset creator.
                + timestamp (number) - UNIX timestamp of asset creation.
                + sequenceNumber (number) - Used to assure that all assets are unique
        + metadata (object) - Asset service data.
            + bundleId (string) - If the asset has already been added to a bundle, Id of the bundle holding the event
            + bundleTransactionHash (string) - If the asset has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer.ambrosus.io/#/tx/{bundleTransactionHash}`
            + bundleProofBlock (number) - If the asset has already been added to a bundle, block number in which the proof of the bundle has been included
            + bundleUploadTimestamp (number) - If the asset has already been added to a bundle, timestamp of bundle proof upload


    + Body

            {
             "data":[
               {
                "_id":"5e672f4a80d54c1fc22754d2",
                "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
                "metadata":
                 {
                  "bundleId":"0x5042e9e79fc23bb938cf377bf5379d4287c26203c259d342eb2d1f23b181f353",
                  "bundleUploadTimestamp":1583820645,
                  "bundleProofBlock":38,
                  "bundleTransactionHash":"0x7757fef7f32f020fb1f23ce32a93b193fe0d14a70c2dbea9655cefa80e7348f7"
                 },
                "content":{
                 "idData":{
                  "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
                  "timestamp":1582616736,
                  "sequenceNumber":0
                 },
                "signature":"0x669f6a33dafaa9c35953bbab201eba63ad4b6960252af398d7cea230c17ec5323dae8c637e8995a799da8c13aeb5101163876e3411e43852a1cb4c7669bc9cc21c"},
                "repository":{}
               }
              ],
              "meta":{
               "code":200,
               "count":1
               },
              "pagination":{
               "hasNext":false,
               "next":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU2NzJmNGE4MGQ1NGMxZmMyMjc1NGQyIn1d",
               "hasPrevious":false,
               "previous":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU2NzJmNGE4MGQ1NGMxZmMyMjc1NGQyIn1d"
               }
            }

+ Response 404 (application/json)

    No asset with such assetId found

    + Body

### /assets{?perPage,page,createdBy,fromTimestamp,toTimestamp,identifier}
__ⓘ Note:__  Available only for Atlas node.
#### Find assets [GET]

Finds assets satisfying provided criteria.

+ Parameters

    + perPage (integer, optional) - number of assets to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting assets
    + fromTimestamp (integer, optional) - earliest timestamp for the asset
    + toTimestamp (integer, optional) - latest timestamp for the asset
    + identifier : identifier[{identifierType}]={identifierValue} (string, optional) - This syntax allows to query for assets that have an associated event containing data type `ambrosus.event.identifier` (see Events Data field section) with same identifier of same type. It is possible to find identifiers matching a pattern with help of the pattern decorator. You can use like this: identifier[vin]=pattern(3FRNF65N*). It supports 2 kinds of special characters:
      - __*__ matches any string, including the null string.
      - __?__ matches any single character
      Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    Up to 100 newest assets

    + Attributes (object)
        + results (array) - An array of assets.
            + (object) - Asset.
                + assetId (string) - Content-addressable identifier of the asset.
                + content (object) - All meaningful content of the asset, base of assetId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - General information about an asset.
                        + createdBy (string) - Public address of the asset creator.
                        + timestamp (number) - UNIX timestamp of asset creation.
                        + sequenceNumber (number) - Used to assure that all assets are unique
                + metadata (object) - Asset service data.
                    + bundleId (string) - If the asset has already been added to a bundle, Id of the bundle holding the event
                    + bundleTransactionHash (string) - If the asset has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
                      More info on the transaction can be found under `http://explorer.ambrosus.io/#/tx/{bundleTransactionHash}`
                    + bundleProofBlock (number) - If the asset has already been added to a bundle, block number in which the proof of the bundle has been included
                    + bundleUploadTimestamp (number) - If the asset has already been added to a bundle, timestamp of bundle proof upload

        + resultCount (number) - Total number of assets.


    + Body

            {
             "data":[
               {
                "_id":"5e672f4a80d54c1fc22754d2",
                "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
                "metadata":
                 {
                  "bundleId":"0x5042e9e79fc23bb938cf377bf5379d4287c26203c259d342eb2d1f23b181f353",
                  "bundleUploadTimestamp":1583820645,
                  "bundleProofBlock":38,
                  "bundleTransactionHash":"0x7757fef7f32f020fb1f23ce32a93b193fe0d14a70c2dbea9655cefa80e7348f7"
                 },
                "content":{
                 "idData":{
                  "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
                  "timestamp":1582616736,
                  "sequenceNumber":0
                 },
                "signature":"0x669f6a33dafaa9c35953bbab201eba63ad4b6960252af398d7cea230c17ec5323dae8c637e8995a799da8c13aeb5101163876e3411e43852a1cb4c7669bc9cc21c"},
                "repository":{}
               }
              ],
              "meta":{
               "code":200,
               "count":1
               },
              "pagination":{
               "hasNext":false,
               "next":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU2NzJmNGE4MGQ1NGMxZmMyMjc1NGQyIn1d",
               "hasPrevious":false,
               "previous":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU2NzJmNGE4MGQ1NGMxZmMyMjc1NGQyIn1d"
               }
            }

#### Create an asset [POST]
__ⓘ Note:__  Available only for Atals node.
Places (after intensive validations) the provided asset object into the system.

__Warning__ Request sender needs to have "create_asset" permission

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the asset.
        + content (object) - All meaningful content of the asset, base of assetId.
            + signature (string) - elliptic-curve signature of the idData field. Should be signed with the creator's private address.
            + idData (object) - General information about an asset.
                + createdBy  (string) - Public address of the asset creator.
                + timestamp (number) - UNIX timestamp of asset creation.
                + sequenceNumber (number) - Used to assure that all assets are unique


    + Body

            {
             "content": {
             "idData": {
             "createdBy": "0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
             "timestamp": 1582616736,
             "sequenceNumber" : 0
             },
             "signature": "0x669f6a33dafaa9c35953bbab201eba63ad4b6960252af398d7cea230c17ec5323dae8c637e8995a799da8c13aeb5101163876e3411e43852a1cb4c7669bc9cc21c"
            }


+ Response 201 (application/json)

    Created

    + Body

            {
                 "data":
                  {
                   "_id":"5e786b1777c81e2942d9165a",
                   "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
                   "metadata": {
                    "bundleId":null,
                    "bundleUploadTimestamp":1584950039
                   },
                   "content":{
                    "idData":{
                     "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
                     "timestamp":1582616736,
                     "sequenceNumber":0
                    },
                   "signature":"0x669f6a33dafaa9c35953bbab201eba63ad4b6960252af398d7cea230c17ec5323dae8c637e8995a799da8c13aeb5101163876e3411e43852a1cb4c7669bc9cc21c"
                   }
                  },
                   "meta":
                    {
                     "code":200
                    }
                }

+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered or has no "create_asset" permission

    + Body

### /assets/{assetId}/events{?fromTimestamp,toTimestamp,perPage,page,createdBy,data}
__ⓘ Note:__ Available for both Hermes and Atlas node.
#### Find events [GET]

Finds event satisfying provided criteria.

+ Parameters

    + assetId (string, required) - ID of an asset
    + fromTimestamp (integer, optional) - earliest timestamp for the events
    + toTimestamp (integer, optional) - latest timestamp for the events
    + perPage (integer, optional) - number of events to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting events
    + data : data[type]=ambrosus.event.custom (object, optional) - This syntax allows to query for events by any fields in data array. Query for nested fields is possible, e.g. data[acceleration.x]=10. By default the type of the value is string. To provide a number, use data[acceleration.x]=number(10). To provide geo coordinates use data[geoJson]=geo(longitude, latitude, radius). It is possible to match data values by the pattern using the pattern decorator like so `data[type]=pattern(ambrosus.event.*)`. It support 2 kinds of special characters:
       - __*__ matches any string, including the null string.
       - __?__ matches any single character
       Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + results (array) - Events matching provided criteria on the page
            + (object) - Event.
                + eventId (string) - Content-addressable identifier of the event.
                + content (object) - All meaningful content of the event, base of eventId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - Public information about an event.
                        + assetId (string) - Id of an asset with which the event is connected.
                        + createdBy (string) - Public address of the event creator.
                        + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                        + timestamp (number) - UNIX timestamp of the event creation.
                    + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

        + resultCount (number) - Total number of events matching provided criteria.

    + Body

            {
             "data":[
             {
              "_id":"5e78715c77c81e2942d9165b",
              "eventId":"0x9ee1731e8696ee99602eede6a99f1c8b8834f2956b023ef3845860976d30d974",
              "metadata":
               {
                "bundleId":null,
                "bundleUploadTimestamp":1584951644
               },"content":{
              "idData":{
               "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
               "timestamp":1582616736,
               "accessLevel":0,
               "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
               "dataHash":"0xd1ea055e098c1e041ba2435b2f6d3e53319944c7f53328d6100dff2569463509"
               },
              "signature":"0xe08e336eebf568d7c7809965b8b48ed2b3ea2a0ec9caf8fa7b81d1cc1c46e6e7454203f309c1e98785873c6e42836f65969e3c4e86aa5fa23a89c5512893998c1b",
              "data":[{
               "type":"ambrosus.asset.info",
               "name":"TEST1",
               "assetType":"TEST2"
               }]
              }}],
              "meta":{
               "code":200,
               "count":1
              },
             "pagination":{
              "hasNext":false,
              "next":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU3ODcxNWM3N2M4MWUyOTQyZDkxNjViIn1d",
              "hasPrevious":false,
              "previous":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU3ODcxNWM3N2M4MWUyOTQyZDkxNjViIn1d"
              }
            }

+ Response 400

    One or more of included parameters are not supported, or parameter value is in invalid format

    + Body

+ Response 404

    Event not found

    + Body

#### Create an event [POST]
__ⓘ Note:__  Available only for Atlas node.
Places (after intensive validations) the provided event object into the system.

__Warning__ Message sender needs to have "create_event" permission

+ Parameters

    + assetId (string, required) - ID of an asset

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + content (object) - All meaningful content of the event, base of eventId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Public information about an event.
                + assetId (string) - Id of an asset with which the event is connected.
                + createdBy (string) - Public address of the event creator.
                + accessLevel (number) - The access level of the event. Should be a non-negative integer. Should be greater than or equal to the creator's access level.
                + timestamp (number) - UNIX timestamp of the event creation.
                + dataHash (string) - Hash of the [serialized](Serialization) `data` field
            + data (array) - data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

    + Body

            {
             "content":
              "idData":{
               "assetId": "0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
               "timestamp": 1582616736,
               "accessLevel": 0,
               "createdBy": "0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
               "dataHash": "0xd1ea055e098c1e041ba2435b2f6d3e53319944c7f53328d6100dff2569463509"
               },
               "signature": "0xe08e336eebf568d7c7809965b8b48ed2b3ea2a0ec9caf8fa7b81d1cc1c46e6e7454203f309c1e98785873c6e42836f65969e3c4e86aa5fa23a89c5512893998c1b",
               "data": [{"type": "ambrosus.asset.info", "name": "TEST1", "assetType": "TEST2"}]
            }

+ Response 201 (application/json)

    Created

    + Body

            {
             "data":[
             {
              "_id":"5e78715c77c81e2942d9165b",
              "eventId":"0x9ee1731e8696ee99602eede6a99f1c8b8834f2956b023ef3845860976d30d974",
              "metadata":
               {
                "bundleId":null,
                "bundleUploadTimestamp":1584951644
               },"content":{
              "idData":{
               "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
               "timestamp":1582616736,
               "accessLevel":0,
               "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
               "dataHash":"0xd1ea055e098c1e041ba2435b2f6d3e53319944c7f53328d6100dff2569463509"
               },
              "signature":"0xe08e336eebf568d7c7809965b8b48ed2b3ea2a0ec9caf8fa7b81d1cc1c46e6e7454203f309c1e98785873c6e42836f65969e3c4e86aa5fa23a89c5512893998c1b",
              "data":[{
               "type":"ambrosus.asset.info",
               "name":"TEST1",
               "assetType":"TEST2"
               }]
              }}],
              "meta":{
               "code":200,
               "count":1
              }
            }


+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered or has no "create_event" permission

    + Body

## Group Asset
__ⓘ Note:__ Used for compatibility with old dashboard.  \
__ⓘ Note:__  Available only for Hermes node.

Assets are primary elements moving through a supply chain. The are the nouns of the system. They can represent an ingredient, product, package of products or any other type of container.

An Asset on its own function only as a handle for a Event stream. Because of this, they only contain an `idData` structure holding minimal information about their creation.

Assets are identified by an `assetId` field which is a sha3 hash calculated from the `content` field.


## Group Asset2
__ⓘ Note:__  Available only for Hermes node.

Assets are primary elements moving through a supply chain. The are the nouns of the system. They can represent an ingredient, product, package of products or any other type of container.

An Asset on its own function only as a handle for a Event stream. Because of this, they only contain an `idData` structure holding minimal information about their creation.

Assets are identified by an `assetId` field which is a sha3 hash calculated from the `content` field.

### /asset2/list{?perPage,page,createdBy,fromTimestamp,toTimestamp,identifier}

#### Find assets [GET]

Finds assets satisfying provided criteria.

+ Parameters

    + perPage (integer, optional) - number of assets to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting assets
    + fromTimestamp (integer, optional) - earliest timestamp for the asset
    + toTimestamp (integer, optional) - latest timestamp for the asset
    + identifier : identifier[{identifierType}]={identifierValue} (string, optional) - This syntax allows to query for assets that have an associated event containing data type `ambrosus.event.identifier` (see Events Data field section) with same identifier of same type. It is possible to find identifiers matching a pattern with help of the pattern decorator. You can use like this: identifier[vin]=pattern(3FRNF65N*). It supports 2 kinds of special characters:
      - __*__ matches any string, including the null string.
      - __?__ matches any single character
      Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    Up to 100 newest assets

    + Attributes (object)
        + results (array) - An array of assets.
            + (object) - Asset.
                + assetId (string) - Content-addressable identifier of the asset.
                + content (object) - All meaningful content of the asset, base of assetId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - General information about an asset.
                        + createdBy (string) - Public address of the asset creator.
                        + timestamp (number) - UNIX timestamp of asset creation.
                        + sequenceNumber (number) - Used to assure that all assets are unique
                + metadata (object) - Asset service data.
                    + bundleId (string) - If the asset has already been added to a bundle, Id of the bundle holding the event
                    + bundleTransactionHash (string) - If the asset has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
                      More info on the transaction can be found under `http://explorer.ambrosus.io/#/tx/{bundleTransactionHash}`
                    + bundleProofBlock (number) - If the asset has already been added to a bundle, block number in which the proof of the bundle has been included
                    + bundleUploadTimestamp (number) - If the asset has already been added to a bundle, timestamp of bundle proof upload

        + resultCount (number) - Total number of assets.


    + Body

            {
             "data":[
               {
                "_id":"5e672f4a80d54c1fc22754d2",
                "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
                "metadata":
                 {
                  "bundleId":"0x5042e9e79fc23bb938cf377bf5379d4287c26203c259d342eb2d1f23b181f353",
                  "bundleUploadTimestamp":1583820645,
                  "bundleProofBlock":38,
                  "bundleTransactionHash":"0x7757fef7f32f020fb1f23ce32a93b193fe0d14a70c2dbea9655cefa80e7348f7"
                 },
                "content":{
                 "idData":{
                  "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
                  "timestamp":1582616736,
                  "sequenceNumber":0
                 },
                "signature":"0x669f6a33dafaa9c35953bbab201eba63ad4b6960252af398d7cea230c17ec5323dae8c637e8995a799da8c13aeb5101163876e3411e43852a1cb4c7669bc9cc21c"},
                "repository":{}
               }
              ],
              "meta":{
               "code":200,
               "count":1
               },
              "pagination":{
               "hasNext":false,
               "next":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU2NzJmNGE4MGQ1NGMxZmMyMjc1NGQyIn1d",
               "hasPrevious":false,
               "previous":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU2NzJmNGE4MGQ1NGMxZmMyMjc1NGQyIn1d"
               }
            }

### /asset2/info/{assetId}

#### Fetch an asset by Id [GET]

Fetches asset with provided assetId in the system.

+ Parameters

    + assetId (string, required) - ID of an asset

+ Response 200 (application/json)

    Asset with provided assetId

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the asset.
        + content (object) - All meaningful content of the asset, base of assetId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - General information about an asset.
                + createdBy (string) - Public address of the asset creator.
                + timestamp (number) - UNIX timestamp of asset creation.
                + sequenceNumber (number) - Used to assure that all assets are unique
        + metadata (object) - Asset service data.
            + bundleId (string) - If the asset has already been added to a bundle, Id of the bundle holding the event
            + bundleTransactionHash (string) - If the asset has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer.ambrosus.io/#/tx/{bundleTransactionHash}`
            + bundleProofBlock (number) - If the asset has already been added to a bundle, block number in which the proof of the bundle has been included
            + bundleUploadTimestamp (number) - If the asset has already been added to a bundle, timestamp of bundle proof upload


    + Body

            {
             "data":[
               {
                "_id":"5e672f4a80d54c1fc22754d2",
                "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
                "metadata":
                 {
                  "bundleId":"0x5042e9e79fc23bb938cf377bf5379d4287c26203c259d342eb2d1f23b181f353",
                  "bundleUploadTimestamp":1583820645,
                  "bundleProofBlock":38,
                  "bundleTransactionHash":"0x7757fef7f32f020fb1f23ce32a93b193fe0d14a70c2dbea9655cefa80e7348f7"
                 },
                "content":{
                 "idData":{
                  "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
                  "timestamp":1582616736,
                  "sequenceNumber":0
                 },
                "signature":"0x669f6a33dafaa9c35953bbab201eba63ad4b6960252af398d7cea230c17ec5323dae8c637e8995a799da8c13aeb5101163876e3411e43852a1cb4c7669bc9cc21c"},
                "repository":{}
               }
              ],
              "meta":{
               "code":200,
               "count":1
               },
              "pagination":{
               "hasNext":false,
               "next":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU2NzJmNGE4MGQ1NGMxZmMyMjc1NGQyIn1d",
               "hasPrevious":false,
               "previous":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU2NzJmNGE4MGQ1NGMxZmMyMjc1NGQyIn1d"
               }
            }

+ Response 404 (application/json)

    No asset with such assetId found

    + Body

### /asset2/create/{assetId}

#### Create an asset [POST]

Places (after intensive validations) the provided asset object into the system.

__Warning__ Request sender needs to have "create_asset" permission

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the asset.
        + content (object) - All meaningful content of the asset, base of assetId.
            + signature (string) - elliptic-curve signature of the idData field. Should be signed with the creator's private address.
            + idData (object) - General information about an asset.
                + createdBy  (string) - Public address of the asset creator.
                + timestamp (number) - UNIX timestamp of asset creation.
                + sequenceNumber (number) - Used to assure that all assets are unique


    + Body

            {
                "content": {
                    "idData": {
                        "timestamp": 1582616736,
                        "sequenceNumber" : 0
                    },
                    "signature": "0x669f6a33dafaa9c35953bbab201eba63ad4b6960252af398d7cea230c17ec5323dae8c637e8995a799da8c13aeb5101163876e3411e43852a1cb4c7669bc9cc21c"
                }
            }


+ Response 201 (application/json)

    Created

    + Body

            {
                 "data":
                  {
                   "_id":"5e786b1777c81e2942d9165a",
                   "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
                   "metadata": {
                    "bundleId":null,
                    "bundleUploadTimestamp":1584950039
                   },
                   "content":{
                    "idData":{
                     "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
                     "timestamp":1582616736,
                     "sequenceNumber":0
                    },
                   "signature":"0x669f6a33dafaa9c35953bbab201eba63ad4b6960252af398d7cea230c17ec5323dae8c637e8995a799da8c13aeb5101163876e3411e43852a1cb4c7669bc9cc21c"
                   }
                  },
                   "meta":
                    {
                     "code":200
                    }
                }

+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered or has no "create_asset" permission

    + Body

## Group Events
__ⓘ Note:__ Available for both Hermes and Atlas nodes. \
Events describe all registered changes of state that occurred with the asset. E.g. measured temperature, noted big acceleration or changing pallets. An event consists of the 3 major parts:

* idData – Public information about an event. Contains the ID of the asset, address of the user who has registered the event, minimal access level required to view private data of the event and the timestamp of the event. Additionally idData holds the hash of the Data field.
* Data – Protected information about an event. To get access to the private data, a user needs to have an access level not smaller than the returned event.
* Metadata – Information generated and used by AMB-NET, for example id of a bundle handling an event.


##### Events Data field

Every event has a `data` array, located at `content` with information what actually happened.
Each item in this array is an object with a required `type` field of `string` type.
Following event types are predefined:
* `ambrosus.asset.info` - Human readable information about an asset, such as its name, photos, description, etc.
* `ambrosus.asset.identifiers` - Known identifiers for an asset, must have at least 1 property of type `array`
* `ambrosus.event.identifiers` - Known identifiers for an event, must have at least 1 property of type `array`
* `ambrosus.asset.location` - Location of an asset. Can be expressed with geographical coordinates.
    * `geoJson`: geographical point described with geoJson formula (As described in RFC7946, The GeoJSON Format)
* `ambrosus.event.location` - Location of an event. Can be expressed with geographical coordinates.
    * `geoJson`: geographical point described with geoJson formula (As described in RFC7946, The GeoJSON Format)


### /events/{?assetId,fromTimestamp,toTimestamp,perPage,page,createdBy,data}

#### Find events [GET]

Finds event satisfying provided criteria.

+ Parameters

    + assetId (string, optional) - ID of the asset the events are targeting
    + fromTimestamp (integer, optional) - earliest timestamp for the events
    + toTimestamp (integer, optional) - latest timestamp for the events
    + perPage (integer, optional) - number of events to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting events
    + data : data[type]=ambrosus.event.custom (object, optional) - This syntax allows to query for events by any fields in data array. Query for nested fields is possible, e.g. data[acceleration.x]=10. By default the type of the value is string. To provide a number, use data[acceleration.x]=number(10). To provide geo coordinates use data[geoJson]=geo(longitude, latitude, radius). It is possible to match data values by the pattern using the pattern decorator like so `data[type]=pattern(ambrosus.event.*)`. It support 2 kinds of special characters:
       - __*__ matches any string, including the null string.
       - __?__ matches any single character
       Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + results (array) - Events matching provided criteria on the page
            + (object) - Event.
                + eventId (string) - Content-addressable identifier of the event.
                + content (object) - All meaningful content of the event, base of eventId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - Public information about an event.
                        + assetId (string) - Id of an asset with which the event is connected.
                        + createdBy (string) - Public address of the event creator.
                        + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                        + timestamp (number) - UNIX timestamp of the event creation.
                    + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

        + resultCount (number) - Total number of events matching provided criteria.

    + Body

            {
             "data":[
             {
              "_id":"5e78715c77c81e2942d9165b",
              "eventId":"0x9ee1731e8696ee99602eede6a99f1c8b8834f2956b023ef3845860976d30d974",
              "metadata":
               {
                "bundleId":null,
                "bundleUploadTimestamp":1584951644
               },"content":{
              "idData":{
               "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
               "timestamp":1582616736,
               "accessLevel":0,
               "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
               "dataHash":"0xd1ea055e098c1e041ba2435b2f6d3e53319944c7f53328d6100dff2569463509"
               },
              "signature":"0xe08e336eebf568d7c7809965b8b48ed2b3ea2a0ec9caf8fa7b81d1cc1c46e6e7454203f309c1e98785873c6e42836f65969e3c4e86aa5fa23a89c5512893998c1b",
              "data":[{
               "type":"ambrosus.asset.info",
               "name":"TEST1",
               "assetType":"TEST2"
               }]
              }}],
              "meta":{
               "code":200,
               "count":1
              },
             "pagination":{
              "hasNext":false,
              "next":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU3ODcxNWM3N2M4MWUyOTQyZDkxNjViIn1d",
              "hasPrevious":false,
              "previous":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU3ODcxNWM3N2M4MWUyOTQyZDkxNjViIn1d"
              }
            }

+ Response 400

    One or more of included parameters are not supported, or parameter value is in invalid format

    + Body

+ Response 404

    Event not found

    + Body

### /events/{eventId}

#### Fetch event [GET]

Fetches an event by identifier

+ Parameters

    + eventId (string, required) - ID of an event

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + eventId (string) - Content-addressable identifier of the event.
        + content (object) - All meaningful content of the event, base of eventId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Public information about an event.
                + assetId  (string) - Id of an asset with which the event is connected.
                + createdBy (string) - Public address of the event creator.
                + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                + timestamp (number) - UNIX timestamp of the event creation.
            + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).
        + metadata (object) - Event service data.
            + bundleId (string) - If the event has already been added to a bundle, Id of the bundle holding the event
            + bundleTransactionHash (string) - If the event has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer.ambrosus.io/#/tx/{bundleTransactionHash}`
            + bundleProofBlock (number) - If the event has already been added to a bundle, block number in which the proof of the bundle has been included
            + bundleUploadTimestamp (number) - If the event has already been added to a bundle, timestamp of bundle proof upload

    + Body

            {
                "eventId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "accessLevel": 4,
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": [
                      {
                        "type": "ambrosus.event.customevent",
                        "customField": "customValue"
                      }
                    ]
                }
            }

+ Response 404 (application/json)

    Event not found

    + Body


## Group Events2
__ⓘ Note:__ Available only for Hermes node.
Events describe all registered changes of state that occurred with the asset. E.g. measured temperature, noted big acceleration or changing pallets. An event consists of the 3 major parts:

* idData – Public information about an event. Contains the ID of the asset, address of the user who has registered the event, minimal access level required to view private data of the event and the timestamp of the event. Additionally idData holds the hash of the Data field.
* Data – Protected information about an event. To get access to the private data, a user needs to have an access level not smaller than the returned event.
* Metadata – Information generated and used by AMB-NET, for example id of a bundle handling an event.

##### Events Data field

Every event has a `data` array, located at `content` with information what actually happened.
Each item in this array is an object with a required `type` field of `string` type.
Following event types are predefined:
* `ambrosus.asset.info` - Human readable information about an asset, such as its name, photos, description, etc.
* `ambrosus.asset.identifiers` - Known identifiers for an asset, must have at least 1 property of type `array`
* `ambrosus.event.identifiers` - Known identifiers for an event, must have at least 1 property of type `array`
* `ambrosus.asset.location` - Location of an asset. Can be expressed with geographical coordinates.
    * `geoJson`: geographical point described with geoJson formula (As described in RFC7946, The GeoJSON Format)
* `ambrosus.event.location` - Location of an event. Can be expressed with geographical coordinates.
    * `geoJson`: geographical point described with geoJson formula (As described in RFC7946, The GeoJSON Format)


### /event2/list{?assetId,fromTimestamp,toTimestamp,perPage,page,createdBy,data}

#### Find events [GET]

Finds event satisfying provided criteria.

+ Parameters

    + assetId (string, optional) - ID of the asset the events are targeting
    + fromTimestamp (integer, optional) - earliest timestamp for the events
    + toTimestamp (integer, optional) - latest timestamp for the events
    + perPage (integer, optional) - number of events to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting events
    + data : data[type]=ambrosus.event.custom (object, optional) - This syntax allows to query for events by any fields in data array. Query for nested fields is possible, e.g. data[acceleration.x]=10. By default the type of the value is string. To provide a number, use data[acceleration.x]=number(10). To provide geo coordinates use data[geoJson]=geo(longitude, latitude, radius). It is possible to match data values by the pattern using the pattern decorator like so `data[type]=pattern(ambrosus.event.*)`. It support 2 kinds of special characters:
       - __*__ matches any string, including the null string.
       - __?__ matches any single character
       Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + results (array) - Events matching provided criteria on the page
            + (object) - Event.
                + eventId (string) - Content-addressable identifier of the event.
                + content (object) - All meaningful content of the event, base of eventId.
                    + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
                    + idData (object) - Public information about an event.
                        + assetId (string) - Id of an asset with which the event is connected.
                        + createdBy (string) - Public address of the event creator.
                        + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                        + timestamp (number) - UNIX timestamp of the event creation.
                    + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

        + resultCount (number) - Total number of events matching provided criteria.

    + Body

            {
             "data":[
             {
              "_id":"5e78715c77c81e2942d9165b",
              "eventId":"0x9ee1731e8696ee99602eede6a99f1c8b8834f2956b023ef3845860976d30d974",
              "metadata":
               {
                "bundleId":null,
                "bundleUploadTimestamp":1584951644
               },"content":{
              "idData":{
               "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
               "timestamp":1582616736,
               "accessLevel":0,
               "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
               "dataHash":"0xd1ea055e098c1e041ba2435b2f6d3e53319944c7f53328d6100dff2569463509"
               },
              "signature":"0xe08e336eebf568d7c7809965b8b48ed2b3ea2a0ec9caf8fa7b81d1cc1c46e6e7454203f309c1e98785873c6e42836f65969e3c4e86aa5fa23a89c5512893998c1b",
              "data":[{
               "type":"ambrosus.asset.info",
               "name":"TEST1",
               "assetType":"TEST2"
               }]
              }}],
              "meta":{
               "code":200,
               "count":1
              },
             "pagination":{
              "hasNext":false,
              "next":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU3ODcxNWM3N2M4MWUyOTQyZDkxNjViIn1d",
              "hasPrevious":false,
              "previous":"WzE1ODI2MTY3MzYseyIkb2lkIjoiNWU3ODcxNWM3N2M4MWUyOTQyZDkxNjViIn1d"
              }
            }

+ Response 400

    One or more of included parameters are not supported, or parameter value is in invalid format

    + Body

+ Response 404

    Event not found

    + Body

### /event2/info/{eventId}
#### Fetch event [GET]

Fetches an event by identifier

+ Parameters

    + eventId (string, required) - ID of an event

+ Response 200 (application/json)

    The requested event

    + Attributes (object)
        + eventId (string) - Content-addressable identifier of the event.
        + content (object) - All meaningful content of the event, base of eventId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Public information about an event.
                + assetId  (string) - Id of an asset with which the event is connected.
                + createdBy (string) - Public address of the event creator.
                + accessLevel (number) - The access level of the event. If the user's access level if lower than event's, the data field will not be returned.
                + timestamp (number) - UNIX timestamp of the event creation.
            + data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).
        + metadata (object) - Event service data.
            + bundleId (string) - If the event has already been added to a bundle, Id of the bundle holding the event
            + bundleTransactionHash (string) - If the event has already been added to a bundle, identifier of the transaction on which the proof of bundle has been uploaded.
              More info on the transaction can be found under `http://explorer.ambrosus.io/#/tx/{bundleTransactionHash}`
            + bundleProofBlock (number) - If the event has already been added to a bundle, block number in which the proof of the bundle has been included
            + bundleUploadTimestamp (number) - If the event has already been added to a bundle, timestamp of bundle proof upload

    + Body

            {
                "eventId": "0xc5cfd04.....30755ed65",
                "content": {
                    "signature": "0x30755ed65396facf86c53e6...65c5cfd04be400",
                    "idData": {
                        "assetId": "0xc5cfd04.....30755ed65",
                        "createdBy": "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "accessLevel": 4,
                        "timestamp": 1503424923,
                        "dataHash": "0x01cd181cd38eb5bbd162a44701727a31f457a538"
                    },
                    "data": [
                      {
                        "type": "ambrosus.event.customevent",
                        "customField": "customValue"
                      }
                    ]
                }
            }

+ Response 404 (application/json)

    Event not found

    + Body

### /event2/create/{eventId}

#### Create an event [POST]

Places (after intensive validations) the provided event object into the system.

__Warning__ Message sender needs to have "create_event" permission

+ Parameters

    + eventId: "0xc5cfd04.....30755ed65" (string, required) - ID of an asset

+ Request (application/json)

    + Headers

            Accept: application/json
            Authorization: AMB ...

    + Attributes (object)
        + assetId (string) - Content-addressable identifier of the event.
        + content (object) - All meaningful content of the event, base of eventId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Public information about an event.
                + assetId (string) - Id of an asset with which the event is connected.
                + createdBy (string) - Public address of the event creator.
                + accessLevel (number) - The access level of the event. Should be a non-negative integer. Should be greater than or equal to the creator's access level.
                + timestamp (number) - UNIX timestamp of the event creation.
                + dataHash (string) - Hash of the [serialized](Serialization) `data` field
            + data (array) - data (array) - Array of custom entries as objects (this field is required and have to contain at least one entry).

    + Body

            {
             "content":
              "idData":{
               "assetId": "0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
               "timestamp": 1582616736,
               "accessLevel": 0,
               "createdBy": "0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
               "dataHash": "0xd1ea055e098c1e041ba2435b2f6d3e53319944c7f53328d6100dff2569463509"
               },
               "signature": "0xe08e336eebf568d7c7809965b8b48ed2b3ea2a0ec9caf8fa7b81d1cc1c46e6e7454203f309c1e98785873c6e42836f65969e3c4e86aa5fa23a89c5512893998c1b",
               "data": [{"type": "ambrosus.asset.info", "name": "TEST1", "assetType": "TEST2"}]
            }

+ Response 201 (application/json)

    Created

    + Body

            {
             "data":[
             {
              "_id":"5e78715c77c81e2942d9165b",
              "eventId":"0x9ee1731e8696ee99602eede6a99f1c8b8834f2956b023ef3845860976d30d974",
              "metadata":
               {
                "bundleId":null,
                "bundleUploadTimestamp":1584951644
               },"content":{
              "idData":{
               "assetId":"0x3450e3c846338bc2486fd6a3dc1738db8943d0bf4bc5426f571863b1b814a018",
               "timestamp":1582616736,
               "accessLevel":0,
               "createdBy":"0x2D2a0BE476559200D87EdD128Bd31c100be74e0f",
               "dataHash":"0xd1ea055e098c1e041ba2435b2f6d3e53319944c7f53328d6100dff2569463509"
               },
              "signature":"0xe08e336eebf568d7c7809965b8b48ed2b3ea2a0ec9caf8fa7b81d1cc1c46e6e7454203f309c1e98785873c6e42836f65969e3c4e86aa5fa23a89c5512893998c1b",
              "data":[{
               "type":"ambrosus.asset.info",
               "name":"TEST1",
               "assetType":"TEST2"
               }]
              }}],
              "meta":{
               "code":200,
               "count":1
              }
            }


+ Response 400 (application/json)

    Invalid input

    + Body

+ Response 403 (application/json)

    The createdBy user is not registered or has no "create_event" permission

    + Body

## Group Bundles

Bundles are packages of data that are being published by ambrosus node users. Single bundle contains assets, public events and stubs of private events, that user created since last bundle publication.

Bundles are used to exchange data between the users of ambrosus network. Every bundle's Id is stored on the blockchain.

__ⓘ Note:__ This a lagecy API and should be used only with Atlas.

## /bundle/
__ⓘ Note:__  Available only for Hermes nodes.
#### Get list of bundles [GET]
Fetches a list of all bundles of current user

+ Response 200

    + Body

            {
                "data": [
                    {
                        "bundleId": "0x3f887d04ac3834413d9d4be27fe096805d3c793f217c4a5778aa35e590940d11",
                        "storagePeriods": 1,
                        "bundleProofBlock": 748766,
                        "bundleTransactionHash": "0x9630a149e4700b17246d53df2331a12921ddddfa8d24fbef6e4c7313d726222d",
                        "bundleUploadTimestamp": 1638180940
                    },
                ],
                "meta": {
                    "code": 200,
                    "count": 10
                },
                "pagination": {
                    "hasNext": true,
                    "next": "eyIkb2lkIjoiNjFhMGM0NTRiZGZlOWYwMDNjODdmNzJjIn0",
                    "hasPrevious": false,
                    "previous": "eyIkb2lkIjoiNjFhNGE4MWNmNjE2YmEwMDNjY2IyOGMwIn0"
                }
            }

## /bundle/{bundleId}
__ⓘ Note:__  Available for both Hermes and Atlas nodes.
#### Fetch bundle [GET]

Fetches a bundle by identifier

+ Parameters

    + bundleId (string, required) - ID of a bundle


+ Response 200 (application/json)

    The requested bundle

    + Attributes (object)
        + bundleId (string) - Content-addressable identifier of the bundle (keccak hash of content.idData field).
        + content (object) - All meaningful content of the bundle, base of bundleId.
            + signature (string) - elliptic-curve signature of the idData field signed with the creator's private address.
            + idData (object) - Information about an event.
                + createdBy (string) - Public address of the event creator.
                + timestamp (number) - UNIX timestamp of the event creation.
                + entriesHash (string) - Keccak hash of entries ids, where, depending on entry type, ids are either `assetId` or `eventId`. The order is preserved.
            + entries (array) - An array consisting of assets, events with public data and stubs of events with private data.

    + Body

            {
                "bundleId" : "0xa9bfd34.....30795ed11",
                "content" : {
                    "signature": "0x69ab59115396facf86c53e6...65cbcfd04be420",
                    "idData" : {
                        "createdBy" : "0x162a44701727a31f457a53801cd181cd38eb5bbd",
                        "timestamp" : 1503424923,
                        "entriesHash" : "0x1022181cd38eb5ca2162a44701727a31f457a559"
                        },
                    "entries" : [
                        "<assets and events stubs>"
                    ]
                }
            }

+ Response 404 (application/json)

    Bundle not found

    + Body

## /bundle/{bundleId}/info
__ⓘ Note:__  Availabel for both Hermes and Atlas nodes.
#### Fetch bundle metadata [GET]

Fetches a bundle metadata by identifier

+ Parameters

    + bundleId (string, required) - ID of a bundle


+ Response 200 (application/json)

    The requested bundle

    + Attributes (object)
        + bundleId (string) - Content-addressable identifier of the bundle.
        + bundleTransactionHash (string) - Identifier of the transaction on which the proof of bundle has been uploaded.
          More info on the transaction can be found under `http://explorer.ambrosus.io/#/tx/{bundleTransactionHash}`
        + bundleProofBlock (number) - Block number in which the proof of the bundle has been included
        + bundleUploadTimestamp (number) - Timestamp of bundle proof upload
        + version (number) - Version of the bundle


    + Body

            {
                "bundleId" : "0xa9bfd34.....30795ed11",
                "bundleTransactionHash": "0xc9087b7510e98183f705fe99ddb6964f3b845878d8a801cf6b110975599b6009",
                "bundleProofBlock": 142,
                "bundleUploadTimestamp": 1503424969,
                "version": 2
            }

+ Response 404 (application/json)

    Bundle doesn't exist or the metadata for it is missing

    + Body


## /bundle/exists/{bundleId}
__ⓘ Note:__  Available only for Hermes nodes.
#### Check if bundle exists [GET]

+ Response 200 (application/json)

    + Body

            {
                "data": true,
                "meta": {
                    "code": 200
                {
            }

## /bundle/query
__ⓘ Note:__  Available onlt for Hermes nodes.
#### Query underlying mongoDB [POST]
+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
                "query": [{
                    "field": "bundleId",
                    "value": ["0x2d840fe1b5dcd7816070fbc23eda8114676e2cfa2bb30abf33ea21bbcd36c0e4", "0x81aae998852e50efbcaecd2296f705e1b8e6811cb1fc167ea21d4781a12cf492"],
                    "operator": "equal"
                }]
            }

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "bundleId": "0x3f887d04ac3834413d9d4be27fe096805d3c793f217c4a5778aa35e590940d11",
                        "storagePeriods": 1,
                        "bundleProofBlock": 748766,
                        "bundleTransactionHash": "0x9630a149e4700b17246d53df2331a12921ddddfa8d24fbef6e4c7313d726222d",
                        "bundleUploadTimestamp": 1638180940
                    }
                ],
                "meta": {
                    "code": 200,
                    "count": 1
                },
                "pagination": {
                    "hasNext": false,
                    "next": "eyIkb2lkIjoiNjFhNGE4MWNmNjE2YmEwMDNjY2IyOGMwIn0",
                    "hasPrevious": false,
                    "previous": "eyIkb2lkIjoiNjFhNGE4MWNmNjE2YmEwMDNjY2IyOGMwIn0"
                }
            }

## /{bundleId}/restore
__ⓘ Note:__  Available onlyfor Atals nodes.
#### Resotore bundle from backup [GET]
+ Response

    + Body


## Group Bundles2
__ⓘ Note:__ Available only for Hermes nodes.
Bundles are packages of data that are being published by ambrosus node users. Single bundle contains assets, public events and stubs of private events, that user created since last bundle publication.

Bundles are used to exchange data between the users of ambrosus network. Every bundle's Id is stored on the blockchain.

ⓘ Note: the call can be applied only to Hermes node.

## /bundle2/list
#### Get list of bundles [GET]
+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "bundleId": "0x3f887d04ac3834413d9d4be27fe096805d3c793f217c4a5778aa35e590940d11",
                        "storagePeriods": 1,
                        "bundleProofBlock": 748766,
                        "bundleTransactionHash": "0x9630a149e4700b17246d53df2331a12921ddddfa8d24fbef6e4c7313d726222d",
                        "bundleUploadTimestamp": 1638180940
                    },
                ],
                "meta": {
                    "code": 200,
                    "count": 10
                },
                "pagination": {
                    "hasNext": true,
                    "next": "eyIkb2lkIjoiNjFhMGM0NTRiZGZlOWYwMDNjODdmNzJjIn0",
                    "hasPrevious": false,
                    "previous": "eyIkb2lkIjoiNjFhNGE4MWNmNjE2YmEwMDNjY2IyOGMwIn0"
                }
            }

## /bundle2/info/{bundleId}
#### Get info about bundle [GET]
+ Parameters

    + bundleId (string, required) - the id of a bundle

+ Response 200 (application/json)

    + Body

            {
                "data": {
                    "bundleId": "0x3f887d04ac3834413d9d4be27fe096805d3c793f217c4a5778aa35e590940d11",
                    "storagePeriods": 1,
                    "bundleProofBlock": 748766,
                    "bundleTransactionHash": "0x9630a149e4700b17246d53df2331a12921ddddfa8d24fbef6e4c7313d726222d",
                    "bundleUploadTimestamp": 1638180940
                },
                "meta": {
                    "code": 200
                }
            }

+ Response 404 (application/json)

    Bundle doesn't exist or the metadata for it is missing

    + Body

## /bundle2/query
#### Query underlying mongoDB [POST]
+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

            {
                "query": [{
                    "field": "bundleId",
                    "value": ["0x2d840fe1b5dcd7816070fbc23eda8114676e2cfa2bb30abf33ea21bbcd36c0e4", "0x81aae998852e50efbcaecd2296f705e1b8e6811cb1fc167ea21d4781a12cf492"],
                    "operator": "equal"
                }]
            }

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "bundleId": "0x3f887d04ac3834413d9d4be27fe096805d3c793f217c4a5778aa35e590940d11",
                        "storagePeriods": 1,
                        "bundleProofBlock": 748766,
                        "bundleTransactionHash": "0x9630a149e4700b17246d53df2331a12921ddddfa8d24fbef6e4c7313d726222d",
                        "bundleUploadTimestamp": 1638180940
                    }
                ],
                "meta": {
                    "code": 200,
                    "count": 1
                },
                "pagination": {
                    "hasNext": false,
                    "next": "eyIkb2lkIjoiNjFhNGE4MWNmNjE2YmEwMDNjY2IyOGMwIn0",
                    "hasPrevious": false,
                    "previous": "eyIkb2lkIjoiNjFhNGE4MWNmNjE2YmEwMDNjY2IyOGMwIn0"
                }
            }

## /bundle2/push
__Warning__ super_account permision is required
#### Push bundles from hermes to network [GET]
+ Response 200 (applicaiton/json)

    Bundles are pushed.

    + Body

+ Response 403 (application/json)

    The user is not registered or has no "create_event" permission

    + Body


## Group Nodeinfo
__ⓘ Note:__ Available for both Hermes and Atlas nodes.
Information on the Gateway node.

## /nodeinfo

#### Get node info [GET]

+ Response 200 (application/json)

    + Attributes (object)
        + commit (string) - Hash of the latest git commit on the node
        + version (string) - Version of the Ambrosus Node
        + nodeAddress (string) - An Ambrosus address of the node
        + workerLogs (array) - An array containing up to 10 last worker logs (Hermes or Atlas - depending on node type)


    + Body

            {
                "commit" : "e7b85366ba78e34d4ec98cbcc01a4ae0aa36b098",
                "version": "0.0.1",
                "nodeAddress": "0xEbDEAC82424a053DFf79397862BD122F76798bC5",
            }

## Group Analytics
__ⓘ Note:__  Available only for Hermes node.
Analytical information about collections and organizations

## /analytics/{organizationId}/{collection}/count
#### Get number of events or assets in organization [GET]
+ Parameters

    + organizationId (string, required) - ID of a organization
    + collection (string, required) - Collection type (event or asset)

+ Response 200 (application/json)

    + Attributes (object)
        + data (object) - contains requested data
            + count (number) - Count of selected collection type
        + meta (object) - some additional information
            + code (number) - Response code


    + Body

            {
                "data": {
                    "count": 32
                },
                "meta": {
                    "code": 200
                }
            }

## /analytics/{organizationId}/{collection}/count/{start}/{end}/total
#### Get number of events or assets in organization in given period of time [GET]
+ Parameters

    + organizationId (string, required) - ID of a organization
    + collection (string, required) - Collection type (event or asset)
    + start (number, required) - The start date (Unix timestamp)
    + end (number, required) - The end date (Unix timestamp)

+ Response 200 (application/json)

    + Attributes (object)
        + data (object) - contains requested data
            + count (number) - Count of selected collection type
        + meta (object) - some additional information
            + code (number) - Response code


    + Body

            {
                "data": {
                    "count": 5
                },
                "meta": {
                    "code": 200
                }
            }

## /analytics/{organizationId}/{collection}/count/{start}/{end}/aggregate/{group}
#### Get number of assets of events in organization in given period of time grouped by some parameter [GET]
+ Parameters

    + organizationId (string, required) - ID of a organization
    + collection (string, required) - Collection type (event or asset)
    + start (number, required) - The start date (Unix timestamp)
    + end (number, required) - The end date (Unix timestamp)
    + group (string, required) - The grouping parameter

+ Response 200 (application/json)

    + Attributes (object)
        + data (object) - contains requested data
            + count (number) - Count of selected collection type
        + meta (object) - some additional information
            + code (number) - Response code


    + Body

            {
                "data": {
                    "count": [
                        {
                            "timestamp": 1638092099,
                            "count": 0
                        },
                        {
                            "timestamp": 1638171299,
                            "count": 0
                        },
                        {
                            "timestamp": 1638174899,
                            "count": 0
                        },
                        {
                            "timestamp": 1638178499,
                            "count": 0
                        }
                            ]
                },
                "meta": {
                    "code": 200
                }
            }

## /analytics/{collection}/count
__Warning__ super_account permissions required
#### Get number of assets or events in whole node [GET]
+ Parameters

    + collection (string, required) - Collection type (event or asset)

+ Response 200 (application/json)

    + Attributes (object)
        + data (object) - contains requested data
            + count (number) - Count of selected collection type
        + meta (object) - some additional information
            + code (number) - Response code

    + Body

                {
                    "data": {
                        "count": 53
                    },
                    "meta": {
                        "code": 200
                    }
                }


## /analytics/{collection}/count/{start}/{end}/total
__Warning__ super_account permissions required
#### Get numbre of assets or events in whole node [GET]
+ Parameters

    + collection (string, required) - Collection type (event or asset)
    + start (number, required) - The start date (Unix timestamp)
    + end (number, required) - The end date (Unix timestamp)

+ Response 200 (application/json)

    + Attributes (object)
        + data (object) - contains requested data
            + count (number) - Count of selected collection type
        + meta (object) - some additional information
            + code (number) - Response code

    + Body

                {
                    "data": {
                        "count": 7
                    },
                    "meta": {
                        "code": 200
                    }
                }



## /analytics/{collection}/count/{start}/{end}/aggregate/{group}
__Warning__ super_account permissions required
#### Get number of assets ot events in whole node grouped by parameter [GET]
+ Parameters

    + collection (string, required) - Collection type (event or asset)
    + start (number, required) - The start date (Unix timestamp)
    + end (number, required) - The end date (Unix timestamp)
    + group (string, required) - The grouping parameter

+ Response 200 (application/json)

    + Attributes (object)
        + data (object) - contains requested data
            + count (array) - Count of selected collection type
                + (object) - the grouped collection
                    + {group} - grouping characteristic
                    + count (number) - the count
        + meta (object) - some additional information
            + code (number) - Response code


    + Body

            {
                "data": {
                    "count": [
                        {
                            "{group}": 1638092099,
                            "count": 0
                        },
                        {
                            "{group}": 1638171299,
                            "count": 0
                        },
                        {
                            "{group}": 1638174899,
                            "count": 0
                        },
                        {
                            "{group}": 1638178499,
                            "count": 0
                        }
                            ]
                },
                "meta": {
                    "code": 200
                }
            }


## Group Admin
__ⓘ Note:__  Available only for Hermes node.
Administrator actions

## /admin/pushbundle
__Warning__ super_account permissions required
#### Push bundles from hermes to network [GET]
+ Response 200

## /admin/getconfig
__Warning__ super_account permissions required
#### get verbose info [GET]
+ Response 200 (application/json)

    + Attributes
        + data (object) - contains requested data
            + address (string) - address of this node
            + content (object) - response contents
                + organizaitons (array) - the array of organizations saved on this node
                    + (object) - the organization
                        + owner (string) - the account address of organizations owner
                        + title (string) - the name of this organization
                        + createdBy (string) - the account address of user who created this organization
                        + organizationId (number) - the unique id of this organization
                        + active (boolean) - the status of organization
                        + createdOn (number) - the time of organizatin creation
                + organizationKeys (array) - the public keys of organizations
                    + (object)
                        + organizatinId (number) - the unique id of this organization
                        + key (string) - the public key of this organization
                + accounts (array) - the list of account stored on this node
                    + (object) - the account
                        + address (string) - account address
                        + accessLevel (number) - the level of data access of this user
                        + organization (number) - the id of organization to which user are belong
                        + permissions (array) - the permission of a user
                            + (string) - the permission
                        + registeredBy (string) - account address of the account creator
                        + registeredOn (number) - the unix timestamp of time went the account was registered
                        + active (boolean) - the status of the account
                + accountDetails (array) - the ditails about account
                    + (object)
                        + address (string) - the account address
                        + email (string) - the email
                        + fullName (string) - the fullName of the user
                        + createdBy (string) - the account address of the account creator
                        + createdOn (number) - the unix timestamp of time when account was created
        + meta (object) - the metadata
            + code (number) - the status code


    + Body

            {
                "data": {
                    "address": "0xe51fC0f13ab6CE533CC344F6754895F3E712EC05",
                    "content": {
                        "organizations": [
                            {
                                "owner": null,
                                "title": "built-in",
                                "createdBy": null,
                                "organizationId": 0,
                                "active": true,
                                "createdOn": 1633421614
                            },
                        ],
                        "organizationKeys": [
                            {
                                "organizationId": 0,
                                "Key": "org key"
                            },
                        ],
                        "accounts": [
                            {
                                "address": "some address",
                                "accessLevel": 1000,
                                "organization": 0,
                                "permissions": [
                                    "super_account",
                                    "manage_accounts",
                                    "register_accounts"
                                ],
                                "registeredBy": "some address",
                                "registeredOn": 1633421614,
                                "active": true
                            },
                        ],
                        "accountDetails": [
                            {
                                "address": "some address",
                                "email": "test@example.com",
                                "fullName": null,
                                "createdBy": "some address",
                                "createdOn": 1633594494
                            },
                        ],
                    },
                },

                "meta": {
                    "code": 200
                }
            }


## /restoreconfig
__Warning__ super_account is required
#### Push new config to the Herems node [POST]
+ Request

    + Attributes
        + data (object) - contains requested data
            + address (string) - address of this node
            + content (object) - response contents
                + organizaitons (array) - the array of organizations saved on this node
                    + (object) - the organization
                        + owner (string) - the account address of organizations owner
                        + title (string) - the name of this organization
                        + createdBy (string) - the account address of user who created this organization
                        + organizationId (number) - the unique id of this organization
                        + active (boolean) - the status of organization
                        + createdOn (number) - the time of organizatin creation
                + organizationKeys (array) - the public keys of organizations
                    + (object)
                        + organizatinId (number) - the unique id of this organization
                        + key (string) - the public key of this organization
                + accounts (array) - the list of account stored on this node
                    + (object) - the account
                        + address (string) - account address
                        + accessLevel (number) - the level of data access of this user
                        + organizationId (number) - the id of organization to which user are belong
                        + permissions (array) - the permission of a user
                            + (string) - the permission
                        + registeredBy (string) - account address of the account creator
                        + registeredOn (number) - the unix timestamp of time went the account was registered
                        + active (boolean) - the status of the account
                + accountDetails (array) - the ditails about account
                    + (object)
                        + address (string) - the account address
                        + email (string) - the email
                        + fullName (string) - the fullName of the user
                        + createdBy (string) - the account address of the account creator
                        + createdOn (number) - the unix timestamp of time when account was created
        + meta (object) - the metadata
            + code (number) - the status code


    + Body

            {
                "data": {
                "address": "0xe51fC0f13ab6CE533CC344F6754895F3E712EC05",
                "content": {
                    "organizations": [
                        {
                            "owner": null,
                            "title": "built-in",
                            "createdBy": null,
                            "organizationId": 0,
                            "active": true,
                            "createdOn": 1633421614
                        },
                    ],
                    "organizationKeys": [
                        {
                            "organizationId": 0,
                            "Key": "org key"
                        },
                    ],
                    "accounts": [
                        {
                            "address": "some address",
                            "accessLevel": 1000,
                            "organization": 0,
                            "permissions": [
                                "super_account",
                                "manage_accounts",
                                "register_accounts"
                    ],
                    "registeredBy": "some address",
                    "registeredOn": 1633421614,
                    "active": true
                },
                "accountDetails": [
                    {
                        "address": "some address",
                        "email": "test@example.com",
                        "fullName": null,
                        "createdBy": "some address",
                        "createdOn": 1633594494
                    },
                ],
                "meta": {
                    "code": 200
                }
            }

+ Response 200 (application/json)

    Restored.

    + Body

## Group Metrics
Some basic metrics
ⓘ Note: he call can be applied to both Atlas and Hermes nodes.

## /metrics/
__ⓘ Note:__  Available only for Hermes and Atlas nodes.
#### Get all metrics info [GET]
+ Response 200 (text)
    Returns plain text. For example:
    # HELP process_cpu_user_seconds_total Total user CPU time spent in seconds.
    #TYPE process_cpu_user_seconds_total counter
    process_cpu_user_seconds_total 0.000509 1638189507657

## /metrics/amb
__ⓘ Note:__  Available only for Hermes node.
__Warning__ super_account permission is required
#### Get info from super user's token [GET]
+ Response 200 (application/json)

    + Attributes

        + _id (string) - internal id of the token
        + id (number) - id of the token
        + name (string) - the name of the token
        + symbol (string) - the symbolic name of the token
        + circulating_supply (number) - the total number of tokens circulated in the system
        + max_supply (number) - the maximum number of tokens
        + total_supply (number) - the total number of tokens
        + timestamp (string) - the time when request was made
        + rank (number) - the rank of the token
        + percent_change_1h (string) - the change of the price of the token in one hour time interval
        + percent_change_24h (string) - the change of the price of the token in 24 hour time interval
        + percent_change_7d (string) - the change of teh price of the token in 7 days time interval
        + price_usd (number) - the price of the token in USD
        + 24_volume_usd (number) - the volume of token exhange in 24 hour time interval messuared in USD
        + market_cap_usd (number) - the capitalization of the token market
        + createdAt (number) - the unix timestamp of the request time

    + Body

            {
                "_id": "61a4c9cb5b28fd1656fd9a04",
                "id": 1638189515657,
                "name": "Ambrosus",
                "symbol": "AMB",
                "circulating_supply": 538594590,
                "max_supply": null,
                "total_supply": 840388337,
                "timestamp": "2021-11-29T12:38:35.657Z",
                "rank": 856,
                "percent_change_1h": -2.51,
                "percent_change_24h": 11.74,
                "percent_change_7d": 15.26,
                "price_usd": 0.04678301,
                "24_volume_usd": 1226261,
                "market_cap_usd": 39315896,
                "createdAt": 1638189516
            }

## /metrics/bundle
__ⓘ Note:__  Available only for Hermes node.
__Warning__ super_account permission is required
##### Get bundle price
+ Response 200 (application/json)

    + Attributes

        + price (number) - the current price of the bundle in

    + Body

            {
                "price": 12
            }

## /metrics/balance
__ⓘ Note:__  Available only for Hermes node.
#### Get user balance [GET]
+ Response 200 (application/json)

    + Attributes

        + balance (string) - balance of the node's wallet

    + Body

        {
            "balance": "2487907"
        }


## Group Organization
__ⓘ Note:__ Available only for Hermes node.
Organization represents a company that produce goods to be delivered in supply chain.
This is an object that consist of the next fields:
* organizationId - nunmber, required - represent id of organization in the system
* owner - string, required - account address of the organization's owner
* active - boolean, required - shows if organization is active in the system
* title - string, optional - name of the organization
* timeZone - string, oprtional - time zone of organization
* legalAddres - string, optional - legal address of the organization
* logo - string, optional - the url to the organization's logo
* colorPrimary - string, optional - used in organization's page styling
* colorSecondary - string, optional - used in organization's page styling
* createdBy - string, optional - account address of the organization's creator
* createdOn - number, optional - unix timestamp of organization's creations time
* modifiedBy - string, optional - account address of last person who modified organization data
* modifiedOn - number, optional - unix timestamp of last person who modified organizaiton data
* inviteEmail - string, optional - email addres from which invites would be send
* inviteTemplate - string, optional - invitation template

## /organization/{?perPage,page,createdBy,data}
__Warning__ super_account permission in required
##### Get information about all known organizations [GET]
+ Parameters
    + perPage (integer, optional) - number of organizations to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting organizations
    + data : data[type]=ambrosus.event.custom (object, optional) - This syntax allows to query for events by any fields in data array. Query for nested fields is possible, e.g. data[acceleration.x]=10. By default the type of the value is string. To provide a number, use data[acceleration.x]=number(10). To provide geo coordinates use data[geoJson]=geo(longitude, latitude, radius). It is possible to match data values by the pattern using the pattern decorator like so `data[type]=pattern(ambrosus.event.*)`. It support 2 kinds of special characters:
       - __*__ matches any string, including the null string.
       - __?__ matches any single character
       Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    + Attributes

        + data (array) - the response's data
            + (object) - the organization
                + owner (string) - the account address of the organization owner
                + title (string) - the name of the organization
                + createdBy (string) - the account address of the organization creator
                + organizationId (number) - the id of the organization
                + active (boolean) - the status of teh organization
                + createdOn (number) - the unix timestamp of the time when organization was created
        + meta (object) - the metadata of the object
            + code (number) - the status code of the response
            + count (number) - the count of the organizations returned
        + pagination (object) - the data to help handle paggination
            + hasNext (boolean) - shows if there is next page
            + hasPrevious (boolean) - shows if there is previous page

    + Body

            {
                "data": [
                    {
                        "owner": null,
                        "title": "built-in",
                        "createdBy": null,
                        "organizationId": 0,
                        "active": true,
                        "createdOn": 1633421614
                    },
                ],
                "meta": {
                    "code": 200,
                    "count": 1
                },
                "pagination": {
                    "hasNext": false,
                    "hasPrevious": false
                }
            }

## /organization/
__Warning__ super_account is required
#### Create new organization [POST]
+ Request

    + Attributes

        + owner (string) - the account address of the owner of the organization
        + title (string) - the name of the organization
        + timeZone (string) - the time zone in which organization is working
        + legalAddress (string) - the address of the organization in real world
        + active (boolean) - the status of the organization

    + Body

            {
                "owner": "0x2A52139de123c9fa265C206772d1606e326CC044",
                "title": "Fast eddies musical chairs",
                "timeZone": "Australia/Sydney",
                "legalAddress": "1234 Bondi Beach",
                "active": true
            }

+ Response 200 (application/json)

    + Body

## /organization/{organizationId}
##### Get info about organization [GET]
+ Parameters

    + organizationId (number, required) - the organizaiton Id

+ Response 200 (application/json)

    + Body

            {
                "data": {
                    "_id": "615eac7e366a59001bcb5ceb",
                    "owner": "0xAB373FD4EC933B0085bA10FF825cCc6B10647c75",
                    "title": "VADYM-FRONT",
                    "createdOn": 1633594494,
                    "createdBy": "0x0C6C7264E509430bcFa2469bA4eB738c94e6C75A",
                    "organizationId": 9,
                    "active": true
                },
                "meta": {
                    "code": 200
                }
            }

+ Response 404 (application/json)

    Organization doesn't exist or the metadata for it is missing

    + Body

## /organization/{organizationId}/accounts{?perPage,page,createdBy,data}
##### Get accounts associated with this organization [GET]
+ Parameters

    + organizationId (number, required) - the organization Id+ Parameters
    + perPage (integer, optional) - number of organizations to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting organizations
    + data : data[type]=ambrosus.event.custom (object, optional) - This syntax allows to query for events by any fields in data array. Query for nested fields is possible, e.g. data[acceleration.x]=10. By default the type of the value is string. To provide a number, use data[acceleration.x]=number(10). To provide geo coordinates use data[geoJson]=geo(longitude, latitude, radius). It is possible to match data values by the pattern using the pattern decorator like so `data[type]=pattern(ambrosus.event.*)`. It support 2 kinds of special characters:
       - __*__ matches any string, including the null string.
       - __?__ matches any single character
       Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.

+ Response 200 (application/json)

    + Attributes

        + data (array) - the requested data
            + (object) - the account
                + _id (string) - the internal id of the account
                + address (string) - the account address
                + email (string) - the email address
                + fullName (string) - the full name of the user
                + createdBy (string) - the address of the one who created this user
                + createdOn (number) - the unix timestamp of the account's creation time
                + accessLevel (number) - the account's level of data access
                + organization (number) - the id of the organization for which account belog
                + remissions (array) - all accounts permissions
                + registerdBy (string) - the account address of the one who registered this account
                + registeredOn (number) - the unix timestamp when account was created
                + active (boolean) - the status of the account

    + Body

            {
                "data": [
                    {
                        "_id": "615eac7e366a59001bcb5cec",
                        "address": "0xAB373FD4EC933B0085bA10FF825cCc6B10647c75",
                        "email": "melnicenkovadik@gmail.com",
                        "fullName": null,
                        "createdBy": "0x0C6C7264E509430bcFa2469bA4eB738c94e6C75A",
                        "createdOn": 1633594494,
                        "accessLevel": 900,
                        "organization": 9,
                        "permissions": [
                            "create_asset",
                            "create_event",
                            "register_accounts",
                            "manage_accounts"
                        ],
                        "registeredBy": "0x0C6C7264E509430bcFa2469bA4eB738c94e6C75A",
                        "registeredOn": 1633594494,
                        "active": true
                    }
                ],
                "meta": {
                    "code": 200,
                    "count": 1
                },
                "pagination": {
                    "hasNext": false,
                    "next": "eyIkb2lkIjoiNjE1ZWFjN2UzNjZhNTkwMDFiY2I1Y2VjIn0",
                    "hasPrevious": false,
                    "previous": "eyIkb2lkIjoiNjE1ZWFjN2UzNjZhNTkwMDFiY2I1Y2VjIn0"
                }
            }

## /organization/update/{organizationId}
__Warning__ super_account permission is required
#### Update an organization [PUT]
+ Parameters (application/json)

    + organizationId (number, required) - the organization Id

+ Request

    + Body

            {
                "owner": "0x2A52139de123c9fa265C206772d1606e326CC044",
                "title": "Fast eddies musical chairs",
                "timeZone": "Australia/Sydney",
                "legalAddress": "1234 Bondi Beach",
                "active": true
            }

+ Response 200 (application/json)

    Updated.

    + Body

+ Response 404 (application/json)

    Organization doesn't exist or the metadata for it is missing

    + Body

## Group Orgazation2
__ⓘ Note:__ Available only for Hermes node.
Organization represents a company that produce goods to be delivered in supply chain.
This is an object that consist of the next fields:
* organizationId - nunmber, required - represent id of organization in the system
* owner - string, required - account address of the organization's owner
* active - boolean, required - shows if organization is active in the system
* title - string, optional - name of the organization
* timeZone - string, oprtional - time zone of organization
* legalAddres - string, optional - legal address of the organization
* logo - string, optional - the url to the organization's logo
* colorPrimary - string, optional - used in organization's page styling
* colorSecondary - string, optional - used in organization's page styling
* createdBy - string, optional - account address of the organization's creator
* createdOn - number, optional - unix timestamp of organization's creations time
* modifiedBy - string, optional - account address of last person who modified organization data
* modifiedOn - number, optional - unix timestamp of last person who modified organizaiton data
* inviteEmail - string, optional - email addres from which invites would be send
* inviteTemplate - string, optional - invitation template


## /organization2/info/{organizationId}
__Warning__ super_account is required
#### Get info about organization [GET]
+ Parameters

    + organizationId (number, required) - the organizaiton Id

+ Response 200 (application/json)

    + Body

            {
                "data": {
                    "_id": "615eac7e366a59001bcb5ceb",
                    "owner": "0xAB373FD4EC933B0085bA10FF825cCc6B10647c75",
                    "title": "VADYM-FRONT",
                    "createdOn": 1633594494,
                    "createdBy": "0x0C6C7264E509430bcFa2469bA4eB738c94e6C75A",
                    "organizationId": 9,
                    "active": true
                },
                "meta": {
                    "code": 200
                }
            }

+ Response 404 (application/json)

    Organization doesn't exist or the metadata for it is missing

    + Body

## /organization2/backup/{organizationId}
__Warning__ super_account is required
#### Create organization backup [POST]
+ Parameters

    + organizationId (number, required) - the organizaiton Id

+ Response 200 (application/json)

    + Body
            {
                "data": {
                    "some long hex value"
                },
                "meta": {
                    "code": 200
                }
            }

+ Response 404 (application/json)

    Organization doesn't exist or the metadata for it is missing

    + Body


## /organization2/restore
__Warning__ super_account permission is required
#### Restore organization database from backup [GET]
+ Response 200 (application/json)

    + Body

## /organization2/update/{organizationId}
__Warning__ super_account permission is required
#### Update organization data [POST]
+ Parameters

    + organizationId (number, required) - the organization Id

+ Request

    + Body

            {
                "active": true,
                "title": "Conor's cool organization"
            }
+ Response 200 (application/json)

    + Body

## Group Organization Invite
Invite - invitation to join organization. Invitation object consist of:
* organizationId - number, required - the id of the organization who send invite
* email - string, required - the email to which incitation would be send
* subject - string, required - the subejct for the email letter
* inviteId - string, required - the id of the invitation
* invitaionLInk - string, reuired - the url to accept invitation
* sent - boolean, required - the status of the invitation
* validUntil - number, required - the unix timestamp of time when invitation should expire
* createdBy - string, required - the account address of the invitation creator
* createdOn - number, required - the unix timestamp of time when incitation was created

## /organization/invite/
__Warning__ super_account permission is required
#### Get all invints on node [GET]
+ Parameters

    + perPage (integer, optional) - number of organizations to return per page (limited to 100)
    + page (integer, optional) - number of page (more search results than specified in perPage parameter concludes more than one page)
    + createdBy (string, optional) - address of account that created targeting organizations
    + data : data[type]=ambrosus.event.custom (object, optional) - This syntax allows to query for events by any fields in data array. Query for nested fields is possible, e.g. data[acceleration.x]=10. By default the type of the value is string. To provide a number, use data[acceleration.x]=number(10). To provide geo coordinates use data[geoJson]=geo(longitude, latitude, radius). It is possible to match data values by the pattern using the pattern decorator like so `data[type]=pattern(ambrosus.event.*)`. It support 2 kinds of special characters:
       - __*__ matches any string, including the null string.
       - __?__ matches any single character
       Note that patterns cannot have a special character as the first symbol for performance reasons. It is not possible to escape special characters.


+ Response 200 (application/json)

    + Body

        {
            "data": [],
            "meta": {
                "code": 200,
                "count": 0
            },
            "pagination": {
                "hasNext": false,
                "hasPrevious": false
            }
        }


## /organization/invite/{inviteId}/exists
#### Check if invite exists [GET]
+ Parameters

    + inviteId (number, required) - the invitaion Id
+ Response 200 (application/json)

    + Body

        {
            "data": true,
            "meta": {
                "code": 200
            }
        }

## /organization/invite/{inviteId}/accept
#### Accept the invitation [POST]
* Parameters

    + inviteId (number, required) - the invitation Id

+ Request

    + Body

            {
                "address": "0x203C394e59915f85B9c222f6E15ce1FFF699559E"
            }

+ Response 200 (application/json)

    Accepted.

    + Body

+ Response 404 (application/json)

    Invite doesn't exist or the metadata for it is missing

    + Body

## /organization/invite/{inviteId}
#### Delete the invitation [DELETE]
+ Parameters

    + inviteId (number, required) - the invitation Id

+ Response 200 (application/json)

    Deleted.

    + Body

+ Response 404 (application/json)

    Invite doesn't exist or the metadata for it is missing

    + Body

## /organization/invite/resend
__Warning__ super_account permission is required
#### Resend all invitation [GET]
+ Response 200 (application/json)

    + Body


## /organization/invite/
__Warning__ super_account permission is required
#### Create invitation Buld [POST]
+ Request

    + Body
            {
                "title": "Conor wants an org, org.",
                "address": "0x203C394e59915f85B9c222f6E15ce1FFF699559E",
                "email": "test+testOrgRequest1@ambrosus.io",
                "message": "GIVE TO ME ALL OF YOUR ORGS"
            }

+ Response 201 (application/json)

    Created.

    + Body

## Group Organization Request
Request is the request to join organization. Consists of:
* address - string, required - the account address that requests to join.
* title - string, required - the title of organization that is requested
* email - string, required - the email of requet sender
* message - string, required - the message to organization
* createdOn - number, required - the unix timestamp of time when request was created
* refused - boolean, required - the status of request

## /organization/request
__Warning__ super_account permission is required
#### Get all requests [GET]
+ Response 200 (application/json)

    + Body

            {
                "data": [],
                "meta": {
                    "code": 200,
                    "count": 0
                },
                "pagination": {
                    "hasNext": false,
                    "hasPrevious": false
                }
            }


## /organization/request/refused
__Warning__ super_account permission is required
#### Get all refused requests [GET]
+ Response 200 (application/json)

    + Body

            {
                "data": [],
                "meta": {
                    "code": 200,
                    "count": 0
                },
                "pagination": {
                    "hasNext": false,
                    "hasPrevious": false
                }
            }

## /organization/request/{requestId}
__Warning__ super_account permission is required
#### Get request [GET]
+ Parameters

    + requestId (string, required) - the request Id

+ Response 200 (application/json)

    + Body

## /organization/request/{requestId}/approve
__Warningn__ super_account permission is required
#### Approve join request [GET]
+ Parameters

    + requestId (string, required) - the request Id

+ Response 200

    + Body

## /organization/request/{requestId}/refuse
__Warning__ super_account permission is required
#### Refuse join request [GET]
+ Parameters

    + requestId (string, required) - the request Id

+ Response 200 (application/json)

    + Body

## /organization/request/
#### Creates join request [POST]
+ Request

    + Body

            {
                "title": "Conor wants an org, org.",
                "address": "0x203C394e59915f85B9c222f6E15ce1FFF699559E",
                "email": "test+testOrgRequest1@ambrosus.io",
                "message": "GIVE TO ME ALL OF YOUR ORGS"
            }

+ Response 200 (application/json)

    + Body













